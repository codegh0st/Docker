what is build?
---------------
in build step, we give name of registry, repository and the tag ot the docker daemon, and ask to create image. 
repository is the url where the docker have to connect for any particular image. 
repository is the folder where same app's image is stored in derrent versions.
tag is nothing but one alphanumeric unique identifier for that particular image. because when we pull any iamage we have to specify which
version of that app need to be pulled? that we do in tag.

Note: image is layer based architecture, if we do not specify rgistry url/reposioty then by default
It docker will look for image to hub.docker.com, get the base image of the app which is already
There on docker hub, these images are maintained by docker community.

After fetching this base image we add our app and configure it , we write instruction in 'docker file' what exactly we need . Then we build our own costomized image, 
Later we push this image to any registry (artifact hosting tool like nexus). In this case we are pushing our image to hub.docekr.com. 

Later when we need to run this app in any environment like dev, stage, or prod, we just have to pull that image and run it. 
It will creat one container with all required software and configuration, that app will be running. 

[docker flow]
[app-code + dockerfile] -> [build-image] -> [login and push this iamge-to-registry] 
-> [pull this image to dev/stage/prod env] -> [run-that-iamge-as-container]


Docker only connect with those registry who has SSL/TCL configured. so by default nexus server has no SSL/TCL, in orde to work with docker with
nexus, fist configure SSL TCL. encryption in transit. https protocol.

however its not recommended but we can configure docker daemon to work with insecure connection also by configuring /var/lib/docker/daemon.json file.

/etc/docker/daemon.json
sud vi /etc/docker/daemon.json --> create this file, make this entry in this file for insecure acces. this is nexus ip:port
{
"insecure-registries":["43.205.110.218:8081"]
}

***************
virtual box is doing the same thing s docker is doing. but why we moved to docker instead of virtual machines?

isiliye kyon ki virtual machine haeavy hote hai means , virtual machine approache me ek host os hota again on host os , there is a gues os, then on guest
os different kind of dependency install karne padate hai. 

dusra ki, sabhi virutal machines on given host machine shares the same name space of the kernel. eg. volume, network, process, user space etc. so agar
kis vm ke wajah se host machine ka kernel space me gadbad hua to sabhi vm down ho jayege. whereas docker container ka alaga-alag name space hota hai 
isiliye agar kisi container ka namespace kharab hota hai to woh dusre container ko effect nahi karega. Coantianer me complete os nahi hota hai. 
isme just os ka library hota jo host ke kernel se baat kar sake , isiliye light weight hoga hai. 

****************
vm me ham computer ke resources ka pura upyoug nahi kr pate hai. kuch resoruce unused reh jane par bhi ham uspe kisi dusra app ko run nahi kr sakte kyonki
fir isolation ka koi matlab nhi nahi reh jayega. ek vm me ek app hi run hona chahiye. 
supoose we have 1 host computer with 20 gb ram and 100gb hdd. ispe hamne 4 vm reate kr diye. 5gb ram aur 25gb hdd ka. 
abb suppose karo vm-1 me ek app ran kiya jo sirf 2gab ram aur 15ghb hdd hi le raha hai. isliye another 2gb ram aur 10gb hdd waste ho raha hina. 

is waste hue resource pe ahm kisi dusra app app ko nahi run kar sakte, kyon ki fir isolation nahi rahega. versions, dependencies, configurations diffecutly 
dega. 

whsere as container me yadi ran karte to, woh conatiner sir 2gb ram and 10gb hdd ke sath hi create hota. no wastage of resources.

lekin coantine ke case me ais nahi hai. container ustan hi resourec 
leta hai jitana ki woh paritcula app run hone ke liye chahiye. 

*********************


[Advancement of deployement and resource utiliztions]
    * Physical Machine -> Virtual Machine -> Containerization (Docker)





*************
********************

tomcat
docker run -d --name <containerName> -p <hostPort:contianerPort> <Image>
image -> <registryURLOrEndPoint/repositroy:tag>

docker run -d --name nginxcontianer -p 80:80 nqinx:<tag>

docker run -d --name tomcatcontianer -p 8080:8080 tomcat  --> if tag is not provide bydefault take 'latest' tag

Dockerfile
FROM tomcat:8.5.85-jdk17-temurin-focal
COPY target/maven-web-application.war/usr/local/tomcat/webapps/maven-web-application.war

docker build -t 471466100791.dkr.ecr.ap-south-1.amazonaws.com/java-web-app:1


docker loin -u <username> -p <password> <registryurl>

docker login -u aws-user -p aws-password 471466100791.dkr.ecr.ap-south-1.amazonaws.com
docker push 471466100791.dkr.ecr.ap-south-1.amazonaws.com/java-web-app:1
471466100791.dkr.ecr.ap-south-1.amazonaws.com/maven-web-application:1

docker loqin -u AWS -p passw0rd  471466100791.dkr.ecr.ap-south-1.amazonaws.com
docker run -d --name mavenwebapp -p 8080:8080 471466100791.dkr.ecr.ap-south-1.amazonaws.com/maven-web-application:1


Nexus
jFrog
ECR
docker build - 43.205.110.218:8081/repository/maven-web-app:1
docker push 43.205.110.218:8081/repository/maven-web-app:1
/etc/docker/daemon.json
sud vi /etc/docker/daemon.json --> make this entry in this file for insecure acces. this is nexus ip:port
{
"insecure-registries":["43.205.110.218:8081"]
}

then restart the docker daemon. -> sudo systemctl restart docker

*********************



    
